
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Diagnostics.CodeAnalysis
Imports System.Linq
Imports System.Runtime.InteropServices
Imports System.Text
Imports Questify.Builder.Configuration
Imports Questify.Builder.Model.ContentModel.EntityClasses
Imports Questify.Builder.Model.ContentModel.HelperClasses
Imports Questify.Builder.Logic
Imports Questify.Builder.Logic.ContentModel
Imports Questify.Builder.Logic.HelperClasses
Imports Questify.Builder.Logic.TestConstruction
Imports Questify.Builder.Logic.TestConstruction.ChainHandlers.Processing
Imports Questify.Builder.Logic.TestConstruction.ChainHandlers.Validating
Imports Questify.Builder.Logic.TestConstruction.Helpers
Imports Questify.Builder.Logic.ResourceManager
Imports Questify.Builder.Security
Imports Cito.Tester.Common
Imports Cito.Tester.ContentModel
Imports Cito.Tester.ContentModel.Datasources
Imports Questify.Builder.Logic.Service.EventArguments
Imports Questify.Builder.Logic.Service.Exceptions
Imports Questify.Builder.Logic.Service.Factories
Imports Questify.Builder.Client.Forms
Imports Questify.Builder.IoC
Imports Questify.Builder.Logic.Service.Model.Entities
Imports Questify.Builder.Model.ContentModel.FactoryClasses
Imports Questify.Builder.UI
Imports Questify.Builder.UI.Commanding
Imports Questify.Builder.UI.Wpf.Service
Imports Questify.Builder.UI.Wpf.Service.Interfaces

Public Class TestEditor_v2
    Private Enum ShowWindowCommands As Integer
        ''' <summary>
        ''' Activates and displays the window. If the window is minimized or 
        ''' maximized, the system restores it to its original size and position. 
        ''' An application should specify this flag when restoring a minimized window.
        ''' </summary>
        Restore = 9
    End Enum

    <DllImport("user32.dll")>
    Private Shared Function ShowWindow(hWnd As IntPtr, nCmdShow As ShowWindowCommands) As Boolean
    End Function


#Region "Fields"

    Private _assessmentTest As AssessmentTest2
    Private _contextIdentifierForItemViewer As Nullable(Of Integer)
    Private _originalAssessmentTestHash As Byte()
    Private _pasteDestinationParentForRecurseComponents As Object
    Private _resourceManager As DataBaseResourceManager
    Private _resourceReferenceChanges As Dictionary(Of String, Integer)
    Private _testComponentsMarkedForRemoval As List(Of TestComponent2)
    Private _testResourceEntity As AssessmentTestResourceEntity
    Private ReadOnly _validationControls As New List(Of TestEditorContainerBase)
    Private _userTestDesignPermission As TestDesignPermission = TestDesignPermission.Minimal
    Private _viewSelectionDialogAtStartupCancelled As Boolean = False
    Private WithEvents ThisEditorItemSelectorDialog As SelectItemResourceDialog
    Private _hasLoadadOldTestDefinitionModel As Boolean  ' indicates that the editor has loaded a transformed old test definition model
    Private WithEvents _constructionFacade As TestConstructionFacade = New TestConstructionFacade
    Private ReadOnly _autoRefreshDatasources As Boolean
    Private _previewCompleted As Boolean = False 'preview when itempreview panel is activated. when another panel is displayed the visibility is false
    Private _closingPanes As Boolean = False
    Private _itemPropertiesShouldBeShown As Boolean = False
    Private _testComponentBeingSelected As Boolean = False
    Private ReadOnly _windowfacade As IWindowFacade = New WindowFacade()
    Private ReadOnly _itemSupportedViewsValidator As New ItemSupportedViewsValidator(AddressOf SubControl_ResourceNeeded)


#End Region 'Fields

#Region "Constructors"

    Private Sub New()
        ' This call is required by the Windows Form Designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
    End Sub

    Public Sub New(ByVal testResource As AssessmentTestResourceEntity, ByVal autoGenerateDataSourceReportsOnOpen As Boolean, ByVal autoRefreshDatasources As Boolean)
        MyClass.New()

        ' validate parameter(s)
        If testResource Is Nothing Then
            Throw New ArgumentNullException("testResource")
        End If

        _testResourceEntity = testResource
        _resourceManager = New DataBaseResourceManager(_testResourceEntity.BankId)
        _autoRefreshDatasources = autoRefreshDatasources

        'added because you couldn't edit anything if you were granted to execute all tasks
        CheckTestDesignPermissionPermission()
    End Sub

#End Region 'Constructors

#Region "Protected Properties"

    Protected ReadOnly Property IsDirty() As Boolean
        Get
            Return (ResourceDataIsDirty OrElse MetaDataControl.IsDirty() OrElse _testResourceEntity.HasChangesInTopology OrElse ResourceCustomProperties1.RemovedEntities.Count > 0)
        End Get
    End Property

    Protected ReadOnly Property ResourceDataIsDirty() As Boolean
        Get
            Dim currentEntityHash As Byte() = If(_assessmentTest IsNot Nothing, _assessmentTest.GetMD5Hash(), Nothing)
            Return Not ArrayHelper.CompareByteArray(_originalAssessmentTestHash, currentEntityHash)
        End Get
    End Property

#End Region 'Protected Properties

#Region "Public Properties"

    Public ReadOnly Property AssessmentTest() As AssessmentTest2
        Get
            Return _assessmentTest
        End Get
    End Property

    Public ReadOnly Property TestResourceEntity() As AssessmentTestResourceEntity
        Get
            Return _testResourceEntity
        End Get
    End Property

#End Region 'Public Properties

#Region "Private Methods"

    ''' <history>
    ''' Added because if an user is granted to execute all tasks 
    ''' its granted to have minimal testdesign rights. If an user has these rights it cannot modify the test
    ''' now we will check or the rights. If the user is granted to more testdesigns it will only grant for the 
    ''' one that allows the user to execute most functions
    ''' </history> 
    Private Sub CheckTestDesignPermissionPermission()
        Dim advancedDesign As Boolean = PermissionFactory.Instance.TryUserIsPermittedToNamedTask(TestBuilderPermissionAccess.Execute, TestBuilderPermissionTarget.NamedTask, TestBuilderPermissionNamedTask.TestDesignAdvanced, _testResourceEntity.BankId, 0)
        Dim basicDesign As Boolean = PermissionFactory.Instance.TryUserIsPermittedToNamedTask(TestBuilderPermissionAccess.Execute, TestBuilderPermissionTarget.NamedTask, TestBuilderPermissionNamedTask.TestDesignBasic, _testResourceEntity.BankId, 0)
        Dim minimalDesign As Boolean = PermissionFactory.Instance.TryUserIsPermittedToNamedTask(TestBuilderPermissionAccess.Execute, TestBuilderPermissionTarget.NamedTask, TestBuilderPermissionNamedTask.TestDesignMinimal, _testResourceEntity.BankId, 0)

        If minimalDesign Then _userTestDesignPermission = TestDesignPermission.Minimal
        If basicDesign Then _userTestDesignPermission = TestDesignPermission.Basic
        If advancedDesign Then _userTestDesignPermission = TestDesignPermission.Advanced
    End Sub

    Private Sub HierarchyControl_DragDropItem(ByVal sender As Object, ByVal e As SelectedItemCollectionEventArgs) Handles HierarchyControl.DragDropItem
        Dim selectedItemColl = e.SelectedItemCollection
        If (selectedItemColl Is Nothing) Then Return

        Dim selectedCollection As New List(Of ItemResourceDto)

        For i As Integer = 0 To selectedItemColl.Count - 1
            Dim entity = DirectCast(selectedItemColl.Item(i).GetRow.DataRow, ItemResourceDto)
            If Not (entity Is Nothing) Then
                selectedCollection.Add(entity)
            End If
        Next
        AddItemsToTest(selectedCollection, e.AddToSection, e.Position, e.AbsolutePosition, _constructionFacade)
        'refresh the data in the dialog
        ThisEditorItemSelectorDialog.RefreshGrid(selectedCollection, Nothing)
    End Sub

    Private Sub ThisEditorItemSelectorDialog_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs) Handles ThisEditorItemSelectorDialog.FormClosing
        RemoveHandler ThisEditorItemSelectorDialog.AddingResource, AddressOf ThisEditorItemSelectorDialog_AddingResource
        RemoveHandler ThisEditorItemSelectorDialog.FormClosing, AddressOf ThisEditorItemSelectorDialog_FormClosing

        Me.ThisEditorItemSelectorDialog.Dispose()
        Me.ThisEditorItemSelectorDialog = Nothing
    End Sub

    Private Sub ThisEditorItemSelectorDialog_AddingResource(ByVal sender As Object, ByVal e As SelectedItemCollectionEventArgs) Handles ThisEditorItemSelectorDialog.AddingResource
        ' Because while itemSelectorDialog is open the user is able to change selection 
        ' in Hierarchy-control this is the place to determine section context used for 
        ' adding new items. 
        Dim sectionContext As TestSection2 = HierarchyControl.TestSectionContext

        If sectionContext IsNot Nothing Then
            If AddItemsToTest(Me.ThisEditorItemSelectorDialog.SelectedEntities, sectionContext, -1, -1, _constructionFacade) Then
                ' Refresh the data in the item selection dialog (refresh of Hierarchy Controls is done in AddItemsToTest)
                ThisEditorItemSelectorDialog.RefreshGrid(ThisEditorItemSelectorDialog.SelectedEntities, Nothing)
            Else
                e.Cancelled = True
            End If
        Else
            ' Users should not see this Fail
            Trace.Fail("Unable to add item resource to test", "There was no sectionContext for adding item. No items were added to test.")
        End If
    End Sub

    Private Overloads Function AddItemsToTest(ByVal itemsToAdd As IEnumerable(Of String), ByVal addToSection As TestSection2, ByVal insertAtPosition As Integer, absolutePosition As Integer, ByVal facade As TestConstructionFacade) As Boolean
        Return Me.AddItemsToTest(ProcessingHelpers.GetItemResourceRefList(itemsToAdd), addToSection, insertAtPosition, absolutePosition, facade)
    End Function

    Private Overloads Function AddItemsToTest(ByVal itemsToAdd As IEnumerable(Of ItemResourceDto), ByVal addToSection As TestSection2, ByVal insertAtPosition As Integer, absolutePosition As Integer, ByVal facade As TestConstructionFacade) As Boolean
        Return Me.AddItemsToTest(ProcessingHelpers.GetItemResourceRefList(itemsToAdd), addToSection, insertAtPosition, absolutePosition, facade)
    End Function

    Private Overloads Function AddItemsToTest(ByVal itemsToAdd As IEnumerable(Of ResourceRef), ByVal addToSection As TestSection2, ByVal insertAtPosition As Integer, absolutePosition As Integer, ByVal facade As TestConstructionFacade) As Boolean
        'if just adding via button, then insertAtPosition
        If (insertAtPosition = -1) Then insertAtPosition = HierarchyControl.PositionToInsertItem

        Dim returnValue As Boolean = TestConstructionOp.AddItemsToTest(_assessmentTest, _testResourceEntity, _resourceManager, itemsToAdd, addToSection, insertAtPosition, facade)

        If returnValue Then
            With HierarchyControl
                Dim lastSelectedIndex = If(absolutePosition = -1, .LastSelectedItemRefIndex, absolutePosition)

                .RefetchDataSource(True) 'Here the grid loses its multi select state
                .SetSelection(lastSelectedIndex, itemsToAdd.Count)
            End With
        End If

        Return returnValue
    End Function

    Private Function AddItemsToTestInCodeListOrder(codeListOrder As List(Of String), ByVal addToSection As TestSection2, ByVal insertAtPosition As Integer, ByVal facade As TestConstructionFacade) As Boolean
        'if just adding via codelist, then insertAtPosition
        If (insertAtPosition = -1) Then insertAtPosition = HierarchyControl.PositionToInsertItem

        Dim items As IList(Of ResourceRef) = ProcessingHelpers.GetItemResourceRefList(codeListOrder)
        Return TestConstructionOp.AddItemsToTest(_assessmentTest, _testResourceEntity, _resourceManager, items, addToSection, insertAtPosition, facade)
    End Function

    Private Sub AddItemFromCodelist()
        Using dialog As New AddItemsFromCodeDialog()
            If dialog.ShowDialog() = DialogResult.OK Then
                Dim sectionContext As TestSection2 = HierarchyControl.TestSectionContext
                ' Changed to use the specific add function because we need to add the items in de order the user typed them in the input field.
                AddItemsToTestInCodeListOrder(dialog.ListOfItemCodes, sectionContext, -1, _constructionFacade)
                HierarchyControl.RefetchDataSource(True)
            End If
        End Using
    End Sub

    Private Sub AddItemToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles AddItemToolStripMenuItem.Click, AddItemToolStripButton.Click
        ShowItemSelector()
    End Sub

    Private Sub AddSectionToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles AddSectionToolStripMenuItem.Click, AddSectionToolStripButton.Click, HierarchyControl.AddSectionMenuClick
        ' create new section
        Dim createdSection As CreatedTestNodeAndViews(Of TestSection2, TestSectionViewBase) = AssessmentTestv2Factory.CreateTestSectionAndViews(_assessmentTest.IncludedViews, _assessmentTest)
        If TypeOf HierarchyControl.SelectedComponent Is TestPart2 Then
            ' add to test part
            DirectCast(HierarchyControl.SelectedComponent, TestPart2).Sections.Add(createdSection.TestNode)
        ElseIf TypeOf HierarchyControl.SelectedComponent Is TestSection2 Then
            ' add to test section
            DirectCast(HierarchyControl.SelectedComponent, TestSection2).Components.Add(createdSection.TestNode)
        ElseIf TypeOf HierarchyControl.SelectedComponent Is ItemReference2 Then
            '   addToSection.Components.Insert(insertAtPosition, newItemReference)
            DirectCast(DirectCast(HierarchyControl.SelectedComponent, ItemReference2).Parent, TestSection2).Components.Insert(HierarchyControl.PositionToInsertItem, createdSection.TestNode)
        Else

            Throw New NotSupportedException("Cannot create test section. Unsupported parent type.")
        End If

        ' set default properties
        createdSection.TestNode.Identifier = Guid.NewGuid.ToString()
        createdSection.TestNode.Title = My.Resources.NewSection

        ' refresh tree
        HierarchyControl.RefetchDataSource(False)
        HierarchyControl.SelectedComponent = createdSection.TestNode
    End Sub

    Private Sub HandleHierarchyControl_AddItemsFromCode(ByVal sender As Object, ByVal e As EventArgs) Handles HierarchyControl.AddItemsFromCode, AddItemsFromCodeToolStripMenuItem.Click, AddItemsFromCodeToolStripButton.Click
        If Not (TypeOf HierarchyControl.SelectedComponent Is TestSection2 OrElse TypeOf HierarchyControl.SelectedComponent Is ItemReference2) Then
            Throw New NotSupportedException(
                $"Adding a item from type {HierarchyControl.SelectedComponent.GetType.ToString} not supported")
        End If
        AddItemFromCodelist()
    End Sub

    Private Sub HierarchyControl_TestComponentDoubleClicked(sender As Object, e As TestComponentSelectedEventArgs) Handles HierarchyControl.TestComponentDoubleClicked
        If e.SelectedComponents.Count <> 1 Then
            Return
        End If

        Dim firstSelectedComponent As AssessmentTestNode = e.SelectedComponents(0)

        If Not (TypeOf firstSelectedComponent Is ItemReference2) Then
            Return
        End If

        Dim itemRef = DirectCast(firstSelectedComponent, ItemReference2)

        If itemRef IsNot Nothing Then
            Dim itemResourceDto = DtoFactory.Item.Get(_testResourceEntity.BankId, itemRef.SourceName)

            If (itemResourceDto Is Nothing) Then
                MessageBox.Show(My.Resources.TestEditor_ItemNotFoundMessage, My.Resources.TestEditor_ItemNotFoundTitle, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Return
            End If

            FormHelper.OpenItem(itemResourceDto, canChangeCode:=False)
        End If
    End Sub

    Private Sub AddTestpartMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles AddTestpartToolStripMenuItem.Click, AddTestPartToolStripButton.Click, HierarchyControl.AddTestPartMenuClick
        ' create new test part
        Dim createdTestPart As CreatedTestNodeAndViews(Of TestPart2, TestPartViewBase) = AssessmentTestv2Factory.CreateTestPartAndViews(_assessmentTest.IncludedViews, _assessmentTest)
        _assessmentTest.TestParts.Add(createdTestPart.TestNode)

        ' set default settings of test part
        createdTestPart.TestNode.Identifier = Guid.NewGuid().ToString()
        createdTestPart.TestNode.Title = My.Resources.NewTestpart

        ' create 1 section, because it's always needed under a testpart
        Dim createdSection As CreatedTestNodeAndViews(Of TestSection2, TestSectionViewBase) = AssessmentTestv2Factory.CreateTestSectionAndViews(_assessmentTest.IncludedViews, _assessmentTest)
        createdTestPart.TestNode.Sections.Add(createdSection.TestNode)

        ' set default settings of section
        createdSection.TestNode.Identifier = Guid.NewGuid.ToString()
        createdSection.TestNode.Title = My.Resources.NewSection

        ' refresh tree
        HierarchyControl.RefetchDataSource(False)
        HierarchyControl.SelectedComponent = createdTestPart.TestNode
    End Sub

    Private Sub BindCommands()
        'Handles Visibility
        Dim resources As ComponentResourceManager = New ComponentResourceManager(GetType(TestEditor_v2))
        AddHandler HierarchyControl.SetDataSourceMenuItem.EnabledChanged, Sub()
                                                                              'When command changes state hide / unhide item.
                                                                              HierarchyControl.SetDataSourceMenuItem.Visible = HierarchyControl.SetDataSourceMenuItem.Enabled
                                                                          End Sub

        Dim addDatasource As New AddDataSourceToSection(_testResourceEntity.BankId,
                                                        resources.GetString("AddDataSourceToolStripButton.Text"),
                                                        _assessmentTest,
                                                        _testResourceEntity,
                                                        _resourceManager,
                                                        _constructionFacade,
                                                        Sub() HierarchyControl.RefetchDataSource(True))

        CommandManager1.Bind(addDatasource, New DelegateParameterBinding(Function() HierarchyControl.SelectedComponent), AddDataSourceToolStripButton)
        CommandManager1.Bind(addDatasource, New DelegateParameterBinding(Function() HierarchyControl.SelectedComponent), HierarchyControl.SetDataSourceMenuItem)
    End Sub

    Private Sub BindControlsAtLoad(ByVal resetModelHash As Boolean)
        ' save hash to detect changes
        If resetModelHash Then
            _originalAssessmentTestHash = _assessmentTest.GetMD5Hash()
        End If

        ' set assessment test entity for all property editors
        TestPropertiesControl.TestEntity = _testResourceEntity
        TestPartControl.TestEntity = _testResourceEntity
        TestSectionControl.TestEntity = _testResourceEntity
        ItemReferenceControl.TestEntity = _testResourceEntity

        ' bind
        HierarchyControl.AssessmentTest = _assessmentTest
        HierarchyControl.TestIsNew = _testResourceEntity.IsNew
        HierarchyControl.TestIsTemplate = _testResourceEntity.IsTemplate

        MetaDataControl.ResourceEntity = _testResourceEntity
        ResourceCustomProperties1.ResourceEntity = _testResourceEntity
    End Sub

    Private Sub HandleCommandExecuteRequestFromPropertyEditor(ByVal command As TestEditorCommands, ByVal component As AssessmentTestNode)
        Select Case command
            Case TestEditorCommands.RefreshDataSourceInSection
                ' refresh section with data source
                If TypeOf component Is TestSection2 Then
                    If _autoRefreshDatasources Then
                        Dim components As New List(Of AssessmentTestNode)(New AssessmentTestNode() {component})
                        HierarchyControl_RefreshComponentsWithDataSource(Me, New TestHierarchyControl.RefreshComponentsWithDataSourceEventArgs(components))
                    End If
                Else
                    Throw New Exception(
                        $"Command '{command.ToString()}' not supported for node type '{component.GetType().FullName}'")
                End If
            Case TestEditorCommands.ChangeTestCode
                ' change the test code
                ChangeTestCode()
            Case Else
                Throw New NotImplementedException(
                    $"Command '{command.ToString() _
                                                     }' not implemented in function 'HandleCommandExecuteRequestFromPropertyEditor'")
        End Select
    End Sub

    Private Sub ChangeTestCode()
        If Not PermissionFactory.Instance.TryUserIsPermittedToNamedTask(TestBuilderPermissionAccess.Execute, TestBuilderPermissionTarget.NamedTask, TestBuilderPermissionNamedTask.ChangeTestCode, _testResourceEntity.BankId, 0) Then
            MessageBox.Show(My.Resources.ItemEditor_NoSufficientRightsToPerformThisAction, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return
        End If

        If Me.IsDirty Then
            MessageBox.Show(String.Format(My.Resources.ItemEditor_OnlyPossibleToChangeTheResourceCodeWhenNoOtherChanges, My.Resources.Test), Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return
        End If

        ' get dependent resources
        Dim referencedResources As EntityCollection = ResourceFactory.Instance.GetReferencesForResource(_testResourceEntity)

        ' show dialog
        Dim dlg As New ChangeTestCodeDialog(_assessmentTest.Identifier)
        AddHandler dlg.ValidateNewCodeName, AddressOf ChangeTestCodeDialog_ValidateNewCodeName
        Dim result As DialogResult = dlg.ShowDialog()

        If result <> DialogResult.OK Then
            Return
        End If

        ' change the name
        Dim oldCode As String = _assessmentTest.Identifier
        _assessmentTest.Identifier = dlg.NewCodeName
        If _assessmentTest.CutOffScoreConditions.Any(Function(co) co.LevelId = Guid.Empty AndAlso co.LevelName.Equals(oldCode, StringComparison.InvariantCultureIgnoreCase)) Then
            _assessmentTest.CutOffScoreConditions.ForEach(Sub(co)
                                                              If co.LevelId = Guid.Empty AndAlso co.LevelName.Equals(oldCode, StringComparison.InvariantCultureIgnoreCase) Then
                                                                  co.LevelName = dlg.NewCodeName
                                                              End If
                                                          End Sub)
        End If

        ' try to save
        Try
            If Me.SaveTest() Then
                UpdateTestReferencesInPackage(dlg, oldCode, referencedResources)

                ' get entity from database when entity was new. Database could add additional information to the entity.
                _testResourceEntity = ResourceFactory.Instance.GetAssessmentTest(_testResourceEntity)
                _assessmentTest = _testResourceEntity.GetAssessmentTest

                'check if the save as.. button can be enabled.
                If PermissionFactory.Instance.TryUserIsPermittedTo(TestBuilderPermissionAccess.Edit, TestBuilderPermissionTarget.ItemEntity, _testResourceEntity.BankId) Then Me.SaveAsToolStripButton.Enabled = True

                ' rebind
                BindControlsAtLoad(True)
                Me.DataBindings("text").ReadValue()

                ' succeeded
                MessageBox.Show(My.Resources.TestEditor_TestCodeRenamingIsSucceeded, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Information)
            Else
                ' restore the old name
                _assessmentTest.Identifier = oldCode
            End If
        Catch ex As Exception
            ' format and show exception
            Dim sb As New StringBuilder()
            sb.AppendLine(ex.Message)

            Dim otherException As Exception = ex.InnerException
            Do Until otherException Is Nothing
                sb.AppendFormat("------------------------------------------------------------------------------------{0}{0}{1}", Environment.NewLine, otherException.Message)
                otherException = otherException.InnerException
            Loop
            MessageBox.Show(sb.ToString(), Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Sub UpdateTestReferencesInPackage(dlg As ChangeTestCodeDialog, oldCode As String, referencedResources As EntityCollection)

        For Each refResource As ResourceEntity In referencedResources
            If Not (TypeOf refResource Is TestPackageResourceEntity) Then
                Continue For
            End If

            ' first deserialize data, because .NET detects the code scheme of the xml
            Dim testPackage As TestPackage = Nothing
            Dim testPackageResourceData As ResourceDataEntity
            testPackageResourceData = ResourceFactory.Instance.GetResourceData(refResource)
            refResource.ResourceData = testPackageResourceData
            testPackage = TestPackageFactory.ReturnTestPackageModelFromByteArray(testPackageResourceData.BinData)

            For Each view In testPackage.IncludedViews
                Dim plugin = IoCHelper.GetInstances(Of ITestEditorPlugin).Where(Function(p) p.IsSupportedView(view)).FirstOrDefault()

                If Not plugin Is Nothing Then
                    plugin.CodeChanged(testPackage, dlg.NewCodeName, oldCode)
                End If
            Next

            'search for reference and retry 
            For Each testRef In testPackage.GetAllTestReferencesInTestPackage()
                If testRef.SourceName = oldCode Then
                    testRef.SourceName = dlg.NewCodeName
                    testRef.Title = dlg.NewCodeName
                End If
            Next

            'Check: if testpackage is referenced in other testpackages as historical assessment, then update historical assessments within these testreferences too

            'Get dependent resources for testpackage
            Dim referencedTestPackageResources As EntityCollection = ResourceFactory.Instance.GetReferencesForResource(refResource)
            UpdateNameInReferencedPackages(testPackage, oldCode, dlg, referencedTestPackageResources)

            refResource.ResourceData.BinData = SerializeHelper.XmlSerializeToByteArray(testPackage)

            ' save data
            Dim saveResult As String = ResourceFactory.Instance.UpdateTestPackageResource(DirectCast(refResource, TestPackageResourceEntity))
            If Not String.IsNullOrEmpty(saveResult) Then
                Throw New ContentModelException(saveResult)
            End If

        Next
    End Sub

    Private Sub UpdateNameInReferencedPackages(
                                               testPackage As TestPackage,
                                               oldCode As String,
                                               dlg As ChangeTestCodeDialog,
                                               referencedTestPackageResources As EntityCollection)

        For Each refTestPackageResource As ResourceEntity In referencedTestPackageResources
            If Not (TypeOf refTestPackageResource Is TestPackageResourceEntity) Then
                Continue For
            End If

            ' first deserialize data, because .NET detects the code scheme of the xml
            Dim refTestPackage As TestPackage = Nothing
            Dim refTestPackageResourceData As ResourceDataEntity
            refTestPackageResourceData = ResourceFactory.Instance.GetResourceData(refTestPackageResource)
            refTestPackageResource.ResourceData = refTestPackageResourceData
            refTestPackage = TestPackageFactory.ReturnTestPackageModelFromByteArray(refTestPackageResourceData.BinData)

            For Each view In testPackage.IncludedViews
                Dim plugin = IoCHelper.GetInstances(Of ITestEditorPlugin).Where(Function(p) p.IsSupportedView(view)).FirstOrDefault()

                If Not plugin Is Nothing Then
                    plugin.UpdateName(testPackage, dlg.NewCodeName, oldCode)
                End If
            Next

            refTestPackageResource.ResourceData.BinData = SerializeHelper.XmlSerializeToByteArray(refTestPackage)

            ' save data
            Dim saveRefTestPackageResult As String = ResourceFactory.Instance.UpdateTestPackageResource(DirectCast(refTestPackageResource, TestPackageResourceEntity))
            If Not String.IsNullOrEmpty(saveRefTestPackageResult) Then
                Throw New ContentModelException(saveRefTestPackageResult)
            End If

        Next
    End Sub

    Private Sub DeleteTestComponentToolStripButton_Click(ByVal sender As Object, ByVal e As EventArgs) Handles DeleteTestComponentToolStripButton.Click, DeleteTestComponentToolStripMenuItem.Click, HierarchyControl.DeleteTestComponentMenuClick
        Dim selectedComponents As List(Of AssessmentTestNode) = HierarchyControl.SelectedComponents

        If MessageBox.Show(My.Resources.TestEditor_DeleteComponentsQuestionMessage, Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) <> DialogResult.Yes Then
            Return
        End If

        ' remove all components and dependencies is passed list
        For Each resourceDependency As String In TestConstructionOp.DeleteTestComponents(selectedComponents, _assessmentTest, _testResourceEntity, _constructionFacade)
            If _resourceReferenceChanges.ContainsKey(resourceDependency) Then
                _resourceReferenceChanges.Item(resourceDependency) = _resourceReferenceChanges.Item(resourceDependency) - 1
            Else
                _resourceReferenceChanges.Add(resourceDependency, 0)
            End If
        Next

        ' refresh the item selector dialog if opened.
        If Me.ThisEditorItemSelectorDialog IsNot Nothing Then
            If selectedComponents.Exists(Function(a) a.GetType() IsNot GetType(ItemReference2)) Then
                ' when deleted a testpart or section
                ThisEditorItemSelectorDialog.RefreshDatasource()
            Else
                ' when deleted item(s)
                Dim itemRefs = New List(Of String)()
                selectedComponents.FindAll(Function(a) a.GetType() Is GetType(ItemReference2)).ForEach(Sub(d) itemRefs.Add(DirectCast(d, ItemReference2).SourceName))
                ThisEditorItemSelectorDialog.RefreshGrid(Nothing, itemRefs)
            End If
        End If

        HierarchyControl.RefetchDataSource(False)
    End Sub

    Private Sub ShowItemSelector()
        'show dialog for selecting a item
        If (Me.ThisEditorItemSelectorDialog Is Nothing) Then 'the itemSelector is disposed after it has been closed
            Me.ThisEditorItemSelectorDialog = New SelectItemResourceDialog(_testResourceEntity.BankId, _resourceManager, _contextIdentifierForItemViewer, _testResourceEntity, AddressOf ContainsItemSupportedViews)

            'If it fits, place the item selector on the right side of the test editor
            If (Screen.GetWorkingArea(Me).Size.Width - (Me.Location.X + Me.Width) >= Me.ThisEditorItemSelectorDialog.Width) Then
                Me.ThisEditorItemSelectorDialog.StartPosition = FormStartPosition.Manual
                Me.ThisEditorItemSelectorDialog.Location = New Point(Me.Bounds.Right + 5, Me.Location.Y)
            Else
                Me.ThisEditorItemSelectorDialog.StartPosition = FormStartPosition.CenterParent
            End If

            Me.ThisEditorItemSelectorDialog.Show(Me)
        Else
            Me.ThisEditorItemSelectorDialog.Activate()
        End If
    End Sub

    Private Sub SetTestComponentsButtonsEnableState(ByVal singleItemSelected As Boolean)
        Me.DisableAllTestComponentButtons()

        Dim selectedComponents As List(Of AssessmentTestNode) = HierarchyControl.SelectedComponents
        Dim lockedComponentSelected As Boolean = HierarchyControl.HasSelectionLockedComponents(selectedComponents)
        Dim parentIsLocked As Boolean = HierarchyControl.HasSelectionLockedParents(selectedComponents.OfType(Of ItemReference2))

        If HierarchyControl.SelectedComponents.Count > 0 Then
            'Check if the current user can toggle a test component locked for edit.
            LockedForEditToolStripMenuItem.Enabled = PermissionFactory.Instance.TryUserIsPermittedToNamedTask(TestBuilderPermissionAccess.Execute, TestBuilderPermissionTarget.NamedTask, TestBuilderPermissionNamedTask.TestDesignAdvanced, _testResourceEntity.BankId, 0)

            ' use the first selected component to determine the toolbar and context menu buttons state.
            Dim firstSelectedComponent As AssessmentTestNode = HierarchyControl.SelectedComponents(0)

            'Determine if the locked for edit menu item needs to be checked or not.
            LockedForEditToolStripMenuItem.Checked = firstSelectedComponent.LockedForEdit

            If TypeOf firstSelectedComponent Is AssessmentTest2 Then
                SetButtonsEnabledStateForAssessmentTest2(firstSelectedComponent)
            ElseIf TypeOf firstSelectedComponent Is TestPart2 Then
                SetButtonsEnabledStateForTestPart2(firstSelectedComponent, singleItemSelected)
            ElseIf TypeOf firstSelectedComponent Is TestSection2 Then
                SetButtonsEnabledStateForTestSection2(firstSelectedComponent, singleItemSelected)
            ElseIf TypeOf firstSelectedComponent Is ItemReference2 Then
                SetButtonsEnabledStateForItemReference2(firstSelectedComponent)
            Else
                Throw New NotSupportedException(
                    $"Unexpected selected test entity type: '{firstSelectedComponent.GetType().FullName}'")
            End If
        End If

        ' do the same for the context menu inside the hierarchy control
        HierarchyControl.DetermineTestComponentsContextMenuEnableState(_userTestDesignPermission, lockedComponentSelected, parentIsLocked, selectedComponents)
    End Sub

    Private Sub SetButtonsEnabledStateForAssessmentTest2(firstSelectedComponent As AssessmentTestNode)
        Dim assesmentTest As AssessmentTest2 = DirectCast(firstSelectedComponent, AssessmentTest2)
        AddTestPartToolStripButton.Enabled = Not assesmentTest.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        AddTestpartToolStripMenuItem.Enabled = Not assesmentTest.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
    End Sub


    Private Sub SetButtonsEnabledStateForTestPart2(firstSelectedComponent As AssessmentTestNode, singleItemSelected As Boolean)
        Dim testPart As TestPart2 = DirectCast(firstSelectedComponent, TestPart2)

        AddSectionToolStripButton.Enabled = Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        AddSectionToolStripMenuItem.Enabled = Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        DeleteTestComponentToolStripButton.Enabled = Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        DeleteTestComponentToolStripMenuItem.Enabled = Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveTestPartDownToolStripButton.Visible = True
        MoveTestpartDownInTestToolStripMenuItem.Visible = True
        MoveTestPartDownToolStripButton.Enabled = singleItemSelected AndAlso Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        MoveTestpartDownInTestToolStripMenuItem.Enabled = singleItemSelected AndAlso Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveTestpartUpInTestToolStripMenuItem.Visible = True
        MoveTestPartUpToolStripButton.Visible = True
        MoveTestpartUpInTestToolStripMenuItem.Enabled = singleItemSelected AndAlso Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        MoveTestPartUpToolStripButton.Enabled = singleItemSelected AndAlso Not testPart.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveButtonsMenuToolStripSeparator.Visible = True
        MoveButtonsToolStripSeparator.Visible = True

        PasteToolStripButton.Visible = True
    End Sub

    Private Sub SetButtonsEnabledStateForTestSection2(firstSelectedComponent As AssessmentTestNode, singleItemSelected As Boolean)
        Dim testSection As TestSection2 = DirectCast(firstSelectedComponent, TestSection2)

        AddItemsFromCodeToolStripButton.Enabled = Not testSection.LockedForEdit
        AddItemsFromCodeToolStripMenuItem.Enabled = Not testSection.LockedForEdit
        AddItemToolStripButton.Enabled = Not testSection.LockedForEdit
        AddItemToolStripMenuItem.Enabled = Not testSection.LockedForEdit
        AddSectionToolStripButton.Enabled = Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        AddSectionToolStripMenuItem.Enabled = Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        AddDataSourceToolStripButton.Enabled = Not testSection.LockedForEdit
        DeleteTestComponentToolStripButton.Enabled = Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        DeleteTestComponentToolStripMenuItem.Enabled = Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveSectionDownToolStripButton.Visible = True
        MoveSectionDownToolStripMenuItem.Visible = True
        MoveSectionDownToolStripButton.Enabled = singleItemSelected AndAlso Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        MoveSectionDownToolStripMenuItem.Enabled = singleItemSelected AndAlso Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveSectionUpToolStripButton.Visible = True
        MoveSectionUpToolStripMenuItem.Visible = True
        MoveSectionUpToolStripButton.Enabled = singleItemSelected AndAlso Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal
        MoveSectionUpToolStripMenuItem.Enabled = singleItemSelected AndAlso Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        MoveButtonsMenuToolStripSeparator.Visible = True
        MoveButtonsToolStripSeparator.Visible = True

        CopyToolStripButton.Visible = True
        CopyToolStripButton.Enabled = singleItemSelected AndAlso Not testSection.LockedForEdit AndAlso Not _userTestDesignPermission = TestDesignPermission.Minimal

        PasteToolStripButton.Visible = True
    End Sub

    Private Sub SetButtonsEnabledStateForItemReference2(firstSelectedComponent As AssessmentTestNode)

        Dim itemReference As ItemReference2 = DirectCast(firstSelectedComponent, ItemReference2)

        AddItemsFromCodeToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit
        AddItemsFromCodeToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit
        AddItemToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit
        AddItemToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit

        AddSectionToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit
        AddSectionToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit

        AddDataSourceToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit

        DeleteTestComponentToolStripButton.Enabled = Not itemReference.LockedForEdit
        DeleteTestComponentToolStripMenuItem.Enabled = Not itemReference.LockedForEdit

        MoveItemDownInSectionToolStripMenuItem.Visible = True
        MoveItemDownToolStripButton.Visible = True
        MoveItemDownToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit
        MoveItemDownInSectionToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit

        MoveItemDownInSectionToolStripMenuItem.Visible = True
        MoveItemDownToolStripButton.Visible = True
        MoveItemDownToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit
        MoveItemDownInSectionToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit

        MoveItemUpInSectionToolStripMenuItem.Visible = True
        MoveItemUpToolStripButton.Visible = True
        MoveItemUpInSectionToolStripMenuItem.Enabled = Not itemReference.Parent.LockedForEdit
        MoveItemUpToolStripButton.Enabled = Not itemReference.Parent.LockedForEdit

        MoveButtonsMenuToolStripSeparator.Visible = True
        MoveButtonsToolStripSeparator.Visible = True

        CopyToolStripButton.Visible = True
        CopyToolStripButton.Enabled = True

        PasteToolStripButton.Visible = True
    End Sub

    Private Sub ExitToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles ExitToolStripMenuItem.Click
        Me.Close()
    End Sub

    <SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")>
    Private Function GetFullTestEntity(ByVal entity As AssessmentTestResourceEntity) As AssessmentTestResourceEntity
        Return ResourceFactory.Instance.GetAssessmentTest(entity)
    End Function

    Private Function GetItemEntity(ByVal ref As ItemReference2) As ItemResourceEntity
        Dim itemSourceName As String = ref.SourceName
        Dim entity As ItemResourceEntity = DirectCast(ResourceFactory.Instance.GetResourceByNameWithOption(_testResourceEntity.BankId, itemSourceName, New ResourceRequestDTO()), ItemResourceEntity)

        If entity Is Nothing Then
            ' cannot find item in database. This is a serious error!
            Throw New AppLogicException($"Could not get item with name '{ref.SourceName}' from database")
        End If

        Return entity
    End Function

    Private Sub HierarchyControl_AddAssessmentItem(ByVal sender As Object, ByVal e As TestHierarchyControl.AddAssessmentItemEventArgs) Handles HierarchyControl.AddAssessmentItem
        ShowItemSelector()
    End Sub

    Private Sub CopyTestComponents(ByVal sender As Object, ByVal e As EventArgs) Handles CopyToolStripButton.Click, HierarchyControl.CopyTestComponents
        ' Only create clipboard data when something is selected
        If Not HierarchyControl.SelectedComponents.Any() Then
            Return
        End If

        Dim clipboardWrapper As New TestComponentCollectionClipboardWrapper

        For Each validatingEnt As AssessmentTestNode In HierarchyControl.SelectedComponents
            Dim testNode As AssessmentTestNode = validatingEnt
            If testNode IsNot Nothing Then
                clipboardWrapper.Components.Add(testNode)
            End If
        Next

        ' Moving object to clipboard using helper functions
        ClipboardHelper.SetData(clipboardWrapper, True)
    End Sub

    Private Sub HierarchyControl_Enter(ByVal sender As Object, ByVal e As EventArgs) Handles HierarchyControl.Enter
        Me.SetTestComponentsButtonsEnableState(Me.HierarchyControl.SelectedComponents.Count = 1)
    End Sub

    Private Sub TogglePasteToolStripButton()
        Dim result As Boolean = False
        ' Need to check clipboard to enable/disable past menu
        If HierarchyControl.SelectedComponents.Count = 1 Then
            Dim clipboardWrapper As TestComponentCollectionClipboardWrapper
            clipboardWrapper = CType(ClipboardHelper.GetData(), TestComponentCollectionClipboardWrapper)

            If clipboardWrapper IsNot Nothing AndAlso clipboardWrapper.Components IsNot Nothing Then
                Dim firstComponentOnClipboard = CType(clipboardWrapper.Components(0), AssessmentTestNode)

                If TypeOf HierarchyControl.SelectedComponent Is AssessmentTest2 AndAlso TypeOf firstComponentOnClipboard Is TestPart2 Then
                    ' It's only possible to past TestParts under a AssessmentTest
                    result = True
                ElseIf TypeOf HierarchyControl.SelectedComponent Is TestPart2 AndAlso TypeOf firstComponentOnClipboard Is TestSection2 Then
                    ' It's only possible to past TestSections under a TestPart
                    result = True
                ElseIf TypeOf HierarchyControl.SelectedComponent Is TestSection2 AndAlso (TypeOf firstComponentOnClipboard Is TestSection2 OrElse TypeOf firstComponentOnClipboard Is ItemReference2) Then
                    ' It's only possible to past TestSections or ItemReferences under a TestSection
                    result = True
                End If
            End If
        End If
        PasteToolStripButton.Enabled = result
    End Sub

    Private Sub PasteTestComponents(ByVal sender As Object, ByVal e As EventArgs) Handles PasteToolStripButton.Click, HierarchyControl.PasteTestComponents
        Dim clipboardWrapper As TestComponentCollectionClipboardWrapper = Nothing
        clipboardWrapper = CType(ClipboardHelper.GetData(), TestComponentCollectionClipboardWrapper)

        If clipboardWrapper Is Nothing Then
            Return
        End If

        ' Secure reference to the parent/container
        _pasteDestinationParentForRecurseComponents = HierarchyControl.SelectedComponent

        ' Init collection for test components that are removed during copy-past due 
        ' to duplication (Only one reference for item per test is allowed).
        _testComponentsMarkedForRemoval = New List(Of TestComponent2)

        If _pasteDestinationParentForRecurseComponents IsNot Nothing Then
            clipboardWrapper.TraverseComponents(AddressOf RecurseComponentsCallBack, ClipboardHelper.TraversalMethod.BreadthFirst)
            ' During traversal of pasted fragment duplicate testComponents are 
            ' marked for removal. Now removing those components from fragment.
            RemoveTestComponentsMarkedForRemoval(_testComponentsMarkedForRemoval)
        Else
            MessageBox.Show("Invalid paste target selected")
        End If

        ' refresh tree
        HierarchyControl.RefetchDataSource(False)
    End Sub

    Private Sub HierarchyControl_TestComponentSelected(ByVal sender As Object, ByVal e As TestComponentSelectedEventArgs) Handles HierarchyControl.TestComponentSelected
        If Not e.SelectedComponents.Any() Then
            Return
        End If

        Me.SuspendLayout()
        ClosePanes()
        _validationControls.Clear()
        Dim firstSelectedComponent As AssessmentTestNode = e.SelectedComponents(0)
        Dim selectedElementIsLockedForEdit As Boolean = False

        If TypeOf firstSelectedComponent Is AssessmentTest2 Then
            RefreshItemPreviewer(Nothing, Nothing)
            Dim test As AssessmentTest2 = DirectCast(firstSelectedComponent, AssessmentTest2)
            selectedElementIsLockedForEdit = test.LockedForEdit

            Me.TestPropertiesControl.InitializePropertyEditorsAndSetDataSource(test, _assessmentTest.IncludedViews)
            _validationControls.Add(Me.TestPropertiesControl)


            TabControl2.TabPages.Add(TabPageTestProperties)

        ElseIf TypeOf firstSelectedComponent Is ItemReference2 Then
            RefreshItemPreviewer(Nothing, Nothing)
            Dim itemRef As ItemReference2 = DirectCast(firstSelectedComponent, ItemReference2)
            selectedElementIsLockedForEdit = itemRef.LockedForEdit

            Me.ItemReferenceControl.InitializePropertyEditorsAndSetDataSource(itemRef, _assessmentTest.IncludedViews)

            _validationControls.Add(Me.ItemReferenceControl)

            TabControl2.TabPages.Add(TabPageItemReferenceProperties)
            TabControl2.TabPages.Add(TabPagePreview)
        ElseIf TypeOf firstSelectedComponent Is TestPart2 Then
            RefreshItemPreviewer(Nothing, Nothing)
            Dim testPart As TestPart2 = DirectCast(firstSelectedComponent, TestPart2)
            selectedElementIsLockedForEdit = testPart.LockedForEdit

            Me.TestPartControl.InitializePropertyEditorsAndSetDataSource(testPart, _assessmentTest.IncludedViews, _assessmentTest)
            _validationControls.Add(TestPartControl)

            TabControl2.TabPages.Add(TabPageTestPartProperties)
        ElseIf TypeOf firstSelectedComponent Is TestSection2 Then
            RefreshItemPreviewer(Nothing, Nothing)
            Dim section As TestSection2 = DirectCast(firstSelectedComponent, TestSection2)
            selectedElementIsLockedForEdit = section.LockedForEdit

            Me.TestSectionControl.InitializePropertyEditorsAndSetDataSource(section, _assessmentTest.IncludedViews, _assessmentTest.TestParts.SelectMany(Function(tp) tp.Sections.Where(Function(s) s IsNot section AndAlso Not String.IsNullOrEmpty(s.ItemDataSource)).Select(Function(s) s.ItemDataSource)).ToList())
            _validationControls.Add(TestSectionControl)

            TabControl2.TabPages.Add(TabPageTestSectionProperties)
        Else
            ' should not be here
            Throw New NotSupportedException("A not supported test entity is selected in the hierarchy control!")
        End If

        ' set editor control enabled/disables based on lock
        LockTestComponentEditorForEdit(selectedElementIsLockedForEdit)

        _testComponentBeingSelected = False
        Me.ResumeLayout()

        ' update menu and toolbar structure
        Me.TogglePasteToolStripButton()
        Me.SetTestComponentsButtonsEnableState(e.SelectedComponents.Count = 1)
    End Sub

    Private Sub RefreshItemPreviewer(sender As Object, e As EventArgs) Handles TabControl2.Selected
        If Not _closingPanes AndAlso _itemPropertiesShouldBeShown Then
            ItemPreviewControl.StopPreview()
            _previewCompleted = False
            _itemPropertiesShouldBeShown = False
        ElseIf Not _closingPanes AndAlso TabControl2.SelectedTab Is TabPagePreview AndAlso Not _previewCompleted Then
            TabPagePreview.SuspendLayout()
            Dim firstSelectedComponent As AssessmentTestNode = HierarchyControl.SelectedComponents(0)
            Dim itemRef As ItemReference2 = DirectCast(firstSelectedComponent, ItemReference2)
            Dim assessmentItem = GetItemEntity(itemRef).GetAssessmentItem
            ItemPreviewControl.PreviewItem(assessmentItem, _testResourceEntity.BankId, _contextIdentifierForItemViewer, _resourceManager)
            _previewCompleted = True
            TabPagePreview.ResumeLayout()
        ElseIf Not _closingPanes AndAlso Not TabControl2.SelectedTab Is TabPagePreview AndAlso _previewCompleted Then
            ItemPreviewControl.StopPreview()
            _previewCompleted = False
        End If
    End Sub

    Private Sub ClosePanes()
        _closingPanes = True
        _testComponentBeingSelected = True
        ' close all panes 
        For Each tabpage As TabPage In TabControl2.TabPages
            TabControl2.TabPages.Remove(tabpage)
        Next
        _closingPanes = False
    End Sub

    Private Sub ItemPreviewControl_ItemValidatingRequired(ByVal sender As Object, ByVal e As ItemValidationRequiredEventArgs) Handles ItemPreviewControl.ItemValidatingRequired
        ' always pass for this validation, because the item could not be saved when in the item editors. All items
        ' here are expected to be valid.
        e.ValidationValid = True
    End Sub

    Private Sub MoveItemDownInSectionToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles MoveItemDownInSectionToolStripMenuItem.Click, MoveItemDownToolStripButton.Click
        HierarchyControl.MoveCurrentComponentDownInSection()
    End Sub

    Private Sub MoveItemUpInSectionToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles MoveItemUpInSectionToolStripMenuItem.Click, MoveItemUpToolStripButton.Click
        HierarchyControl.MoveCurrentComponentUpInSection()
    End Sub

    Private Sub MoveSectionDownToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles MoveSectionDownToolStripMenuItem.Click, MoveSectionDownToolStripButton.Click
        HierarchyControl.MoveCurrentSectionDownInSectionOrTestPart()
    End Sub

    Private Sub MoveSectionUpToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles MoveSectionUpToolStripMenuItem.Click, MoveSectionUpToolStripButton.Click
        HierarchyControl.MoveCurrentSectionUpInSectionOrTestPart()
    End Sub

    Private Sub MoveTestpartDownInTestToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles MoveTestpartDownInTestToolStripMenuItem.Click, MoveTestPartDownToolStripButton.Click
        HierarchyControl.MoveCurrentTestPartDownInTest()
    End Sub

    Private Sub MoveTestpartUpInTestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles MoveTestpartUpInTestToolStripMenuItem.Click, MoveTestPartUpToolStripButton.Click
        HierarchyControl.MoveCurrentTestPartUpInTest()
    End Sub

    Private Sub PreviewTestToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles PreviewTestToolStripMenuItem.Click
        If Me.IsDirty Then
            ' If there are unsaved changes, notify the user and ask if he wants to save in order to preview the test.
            If MessageBox.Show(My.Resources.TestEditor_TestPreview_IsDirty, Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then
                ' Try to save the changes.
                If Not PreSaveAndSaveAndPostSaveTest() Then
                    ' If saving the test was not succesfull, stop.
                    Return
                End If
            Else
                ' If the user doesn't want to save the changes, stop.
                Return
            End If
        End If

        ' If there are no unsaved changes or the changes we successfully saved, preview the test.
        Dim testDto = DtoFactory.Test.Get(Me.TestResourceEntity.ResourceId)
        RaiseEvent PreviewTest(Me, New EntityActionEventArgs(testDto))
    End Sub

    Private Sub RecurseComponentsCallBack(ByVal component As TestNodeBase, ByRef level As Integer)
        If TypeOf component Is ItemReference2 Then
            RecurseComponentsCallBack_AddItemRef(DirectCast(component, ItemReference2))
        ElseIf TypeOf component Is TestSection2 Then
            RecurseComponentsCallBack_AddSection(DirectCast(component, TestSection2))
        ElseIf TypeOf component Is TestPart2 Then
            RecurseComponentsCallBack_AddTestPart(DirectCast(component, TestPart2))
        End If
    End Sub

    Private Sub RecurseComponentsCallBack_AddItemRef(ByVal newItemReference As ItemReference2)
        Dim resourceForReferencedItem As ResourceEntity = ResourceFactory.Instance.GetResourceByNameWithOption(_testResourceEntity.BankId, newItemReference.SourceName, New ResourceRequestDTO())

        ' Check if this entity isn't in the test already, by checking the dependent resources
        If Not _testResourceEntity.ContainsDependentResource(resourceForReferencedItem) Then
            ' check whether this item is allowed, based on supported view types.
            Dim itemLayoutTemplateNames As List(Of String)
            itemLayoutTemplateNames = ResourceFactory.Instance.GetItemLayoutTemplateSourceNamesForItemCodeList(_testResourceEntity.BankId,
                                                                                                               New List(Of String)(New String() {newItemReference.SourceName}))

            For Each itemLayoutTemplateName As String In itemLayoutTemplateNames ' should be 1
                If Not _itemSupportedViewsValidator.ContainsItemLayoutTemplateSupportedViews(itemLayoutTemplateName, GeneralHelper.GetViewsWithoutGeneral(_assessmentTest.IncludedViews)) Then
                    MessageBox.Show(My.Resources.TestEditorv2_CannotAddItemIncompatibleViewTypes, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Exit Sub
                End If
            Next

            If newItemReference.Parent Is Nothing Then
                ' Check if this element is a root of the copied TestDefinition fragment
                ' And reparent this component to the paste-destination
                If TypeOf _pasteDestinationParentForRecurseComponents Is TestSection2 Then
                    DirectCast(_pasteDestinationParentForRecurseComponents, TestSection2).Components.Add(newItemReference)
                ElseIf TypeOf _pasteDestinationParentForRecurseComponents Is AssessmentTest2 Then
                    ' When element where will be pasted is a assessment, complete testpart is allready pasted, so skip here.
                Else
                    Throw New Exception("Unexpected parent type for component during paste. Parent for ItemRef must be TestSection.")
                End If
            End If

            ' Add item reference as dependent resource to test
            DependencyManagement.AddDependentResourceToResource(_testResourceEntity, resourceForReferencedItem)

        ElseIf newItemReference.Parent IsNot Nothing Then
            ' Item is already part of test and was pasted via copy-pasting a TestSection. 
            ' Marking itemRef for removal (We are not allowed to change collection during 
            ' iteration.
            _testComponentsMarkedForRemoval.Add(newItemReference)
        End If
    End Sub

    Private Sub RecurseComponentsCallBack_AddSection(ByVal newSection As TestSection2)
        Dim includedViews As List(Of String) = _assessmentTest.IncludedViews.FindAll(Function(T) T <> GenericTestModelPlugin.PLUGIN_NAME)
        'For the existing logic below it's important to filter out the default GenericTest view type

        newSection.Identifier = Guid.NewGuid().ToString()
        If newSection.Parent Is Nothing Then

            ' check whether these items are allowed, based on supported view types.
            Dim items As List(Of ItemReference2) = newSection.GetAllItemReferencesInSection(True)
            Dim itemSourceNames As New List(Of String)
            For Each itemRef As ItemReference2 In items
                itemSourceNames.Add(itemRef.SourceName)
            Next

            Dim itemLayoutTemplateNames As New List(Of String)(ResourceFactory.Instance.GetItemLayoutTemplateSourceNamesForItemCodeList(_testResourceEntity.BankId, itemSourceNames))

            For Each itemLayoutTemplateName As String In itemLayoutTemplateNames
                If Not _itemSupportedViewsValidator.ContainsItemLayoutTemplateSupportedViews(itemLayoutTemplateName, includedViews) Then
                    MessageBox.Show(My.Resources.TestEditorv2_CannotAddItemIncompatibleViewTypes, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Exit Sub
                End If
            Next

            If TypeOf _pasteDestinationParentForRecurseComponents Is TestPart2 Then
                DirectCast(_pasteDestinationParentForRecurseComponents, TestPart2).Sections.Add(newSection)
            ElseIf TypeOf _pasteDestinationParentForRecurseComponents Is TestSection2 Then
                DirectCast(_pasteDestinationParentForRecurseComponents, TestSection2).Components.Add(newSection)
            ElseIf TypeOf _pasteDestinationParentForRecurseComponents Is AssessmentTest2 Then
                ' When element where will be pasted is a assessment, complete testpart is allready pasted, so skip here.
            Else
                Throw New Exception("Unexpected parent type for component during paste. Parent for Section must either be a TestPart or TestSection.")
            End If
        End If

        ' Add dependencies for references to other resources (itemSelectors). Therefore all views must be created.
        Dim allDependentResourcesForSection As New ResourceEntryCollection()
        For Each viewType In includedViews
            Dim view As TestSectionViewBase = AssessmentTestv2Factory.CreateTemporaryTestSectionView(newSection, viewType)
            view.GetDependencyResourcesForThisTestSection(allDependentResourcesForSection, False)
        Next

        AddDependentResourcesForTestComponent(allDependentResourcesForSection)
    End Sub

    Private Sub RecurseComponentsCallBack_AddTestPart(ByVal newTestPart As TestPart2)
        If newTestPart IsNot Nothing Then
            newTestPart.Identifier = Guid.NewGuid().ToString()
            If TypeOf _pasteDestinationParentForRecurseComponents Is AssessmentTest2 Then
                ' check whether these items are allowed, based on supported view types.
                Dim items As List(Of ItemReference2) = newTestPart.GetAllItemReferencesInTestPart(True)
                Dim itemSourceNames As New List(Of String)
                For Each itemRef As ItemReference2 In items
                    itemSourceNames.Add(itemRef.SourceName)
                Next

                Dim itemLayoutTemplateNames As New List(Of String)(ResourceFactory.Instance.GetItemLayoutTemplateSourceNamesForItemCodeList(_testResourceEntity.BankId, itemSourceNames))
                For Each itemLayoutTemplateName As String In itemLayoutTemplateNames
                    If Not _itemSupportedViewsValidator.ContainsItemLayoutTemplateSupportedViews(itemLayoutTemplateName, _assessmentTest.IncludedViews) Then
                        MessageBox.Show(My.Resources.TestEditorv2_CannotAddItemIncompatibleViewTypes, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        Exit Sub
                    End If
                Next

                Dim test As AssessmentTest2 = DirectCast(_pasteDestinationParentForRecurseComponents, AssessmentTest2)
                test.TestParts.Add(newTestPart)

                ' Add dependencies for references to other resources (if any). Therefore all views must be created.
                Dim allDependentResourcesForTestPart As New ResourceEntryCollection()
                For Each viewType In _assessmentTest.IncludedViews
                    Dim view As TestPartViewBase = AssessmentTestv2Factory.CreateTemporaryTestPartView(newTestPart, viewType, test)
                    view.GetDependencyResourcesForThisTestPart(allDependentResourcesForTestPart, False)
                Next
                ' Don't fetch in For Each loop, but all in one query:
                AddDependentResourcesForTestComponent(allDependentResourcesForTestPart)
            Else
                Throw New Exception("Unexpected type of paste destination during paste. Paste destination must either be a AssessmentTest.")
            End If
        Else
            Throw New Exception("Expected component of type TestPart during paste.")
        End If
    End Sub

    Private Sub AddDependentResourcesForTestComponent(allDependentResourcesForTestPart As ResourceEntryCollection)
        Dim resourcesForTestPart = ResourceFactory.Instance.GetResourcesByNamesWithOption(_testResourceEntity.BankId, allDependentResourcesForTestPart.Select(Function(dr) dr.Name).ToList(), New ResourceRequestDTO())

        ' Check on missing resources, if any throw exception.
        Dim refNotResolved = allDependentResourcesForTestPart.FirstOrDefault(Function(dr) Not resourcesForTestPart.Cast(Of ResourceEntity).Any(Function(rftp As ResourceEntity) rftp.Name.Equals(dr.Name, StringComparison.InvariantCultureIgnoreCase)))
        If (refNotResolved IsNot Nothing) Then
            ' We should not end-up here. "pre-flight" checks should prevent failure resolving name to ResourceEntity
            Throw New Exception(
                $"Unexpected Error during paste. Unable to resolve dependent resource reference: '{ _
                                   refNotResolved.Name}'.")
        End If

        For Each resourceForReference As ResourceEntity In resourcesForTestPart
            If resourceForReference IsNot Nothing Then
                DependencyManagement.AddDependentResourceToResource(_testResourceEntity, resourceForReference)
            End If
        Next
    End Sub

    Private Sub RemoveTestComponentsMarkedForRemoval(ByVal markedTestComponents As List(Of TestComponent2))
        For Each component As TestComponent2 In markedTestComponents
            If component.Parent IsNot Nothing Then
                If TypeOf component.Parent Is TestSection2 Then
                    DirectCast(component.Parent, TestSection2).Components.Remove(component)
                Else
                    Throw New Exception("TestComponent marked for removal does not have parent of type TestSection.")
                End If
            Else
                Throw New Exception("TestComponent marked for removal without parent set.")
            End If
        Next
    End Sub

    Private Function SaveAsTest() As Boolean
        Dim resultValue As Boolean = False
        Dim oldTestCode As String = _testResourceEntity.Name

        ' The 'save as' function can only be used when the test already exists in the database.
        If _testResourceEntity.IsNew Then
            Throw New ArgumentNullException("test is not yet saved. Save as.. functionality is not supported.")
        End If

        Dim newCode As InputBoxResult = InputBox.Show(My.Resources.ItemEditor_PleaseEnterNewItemCode, False, My.Resources.ItemEditor_SaveAsText, String.Format(My.Resources.CopyOf0, _testResourceEntity.Name), AddressOf ValidationHelper.IsValidTestCode)

        If Not String.IsNullOrWhiteSpace(newCode.Text) Then

            _testResourceEntity.SetAssessmentTest(_assessmentTest)
            Dim oldtestResourceEntity = _testResourceEntity

            Try
                _testResourceEntity = oldtestResourceEntity.CopyToNew(newCode.Text.Trim)
                _testResourceEntity.Version = String.Empty 'Reset version
                _assessmentTest = _testResourceEntity.GetAssessmentTest()

                If _assessmentTest.CutOffScoreConditions.Any(Function(co) co.LevelId = Guid.Empty AndAlso co.LevelName.Equals(oldTestCode, StringComparison.InvariantCultureIgnoreCase)) Then
                    _assessmentTest.CutOffScoreConditions.ForEach(Sub(co)
                                                                      If co.LevelId = Guid.Empty AndAlso co.LevelName.Equals(oldTestCode, StringComparison.InvariantCultureIgnoreCase) Then
                                                                          co.LevelName = newCode.Text
                                                                      End If
                                                                  End Sub)
                End If

                resultValue = SaveTest()
                If resultValue Then
                    ' get entity from database when entity was new. Database could add additional information to the entity.
                    Dim request = New ResourceRequestDTO With
                       {
                            .WithDependencies = True,
                            .WithReferences = False,
                            .WithCustomProperties = True,
                            .WithUserInfo = True,
                            .WithState = True,
                            .WithHiddenResources = False
                       }
                    _testResourceEntity = DirectCast(ResourceFactory.Instance.GetResourceByIdWithOption(Me._testResourceEntity.ResourceId, New AssessmentTestResourceEntityFactory(), request), AssessmentTestResourceEntity) 'ResourceFactory.Instance.GetAssessmentTest(_testResourceEntity)
                    _assessmentTest = _testResourceEntity.GetAssessmentTest()
                Else
                    _testResourceEntity = oldtestResourceEntity
                    _assessmentTest = _testResourceEntity.GetAssessmentTest()
                End If

            Catch ex As Exception
                MessageBox.Show(ex.Message, Application.ProductName)

                _testResourceEntity = oldtestResourceEntity
                _assessmentTest = _testResourceEntity.GetAssessmentTest()
            Finally
                ' rebind
                BindControlsAtLoad(True)
            End Try
        End If

        Return resultValue
    End Function

    Private Sub SaveAsToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles SaveAsToolStripMenuItem.Click, SaveAsToolStripButton.Click
        EnsuresFormUpdateAfterEditing()

        If Not Me.SaveAsTest() Then
            Return
        End If

        BindControlsAtLoad(True)

        Dim titleBarBinding As Binding = Me.DataBindings("text")
        If titleBarBinding IsNot Nothing Then Me.DataBindings.Remove(titleBarBinding)
        titleBarBinding = New Binding("text", _assessmentTest, "identifier")
        AddHandler titleBarBinding.Format, AddressOf TitleToFormTitleFormatter
        Me.DataBindings.Add(titleBarBinding)
    End Sub

    Private Sub SaveCloseToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles SaveCloseToolStripMenuItem.Click, SaveCloseToolStripButton.Click

        EnsuresFormUpdateAfterEditing()
        If Me.IsDirty Then
            If PreSaveAndSaveAndPostSaveTest() Then
                Me.Close()
            End If
        Else
            ' no changes are made, just close the test editor
            Me.Close()
        End If
    End Sub

    Private Function SaveIfNecessary() As Boolean
        If Me.IsDirty AndAlso PermissionFactory.Instance.TryUserIsPermittedTo(TestBuilderPermissionAccess.Edit, TestBuilderPermissionTarget.TestEntity, _testResourceEntity.BankId) Then
            Dim result As DialogResult = MessageBox.Show(My.Resources.Editor_SaveChangesQuestionMessage, Application.ProductName, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)
            Select Case result
                Case DialogResult.Cancel
                    Return False
                Case DialogResult.No
                    Return True
                Case DialogResult.Yes
                    Return SaveTest()
            End Select
        End If

        Return True
    End Function

    Private Function SaveTest() As Boolean
        Dim resultValue As Boolean = False

        If Not Me.IsDirty OrElse Not Me.ValidateAssessmentTest() OrElse Not Me.MetaDataControl.CanUpdateResource(ResourceDataIsDirty) Then
            Return False
        End If

        'Ensure that the bookkeeping of resources being referenced from test sections reflects the actual state of referencing.
        Dim tobeAdded As New List(Of String)
        Dim tobeRemoved As New List(Of String)
        For Each resource As KeyValuePair(Of String, Integer) In _resourceReferenceChanges
            If resource.Value > 0 Then
                tobeAdded.Add(resource.Key)
            Else
                tobeRemoved.Add(resource.Key)
            End If
        Next
        DependencyManagement.UpdateSectionResourceReferenceBookkeeping(_assessmentTest, _testResourceEntity, tobeAdded, tobeRemoved)
        _testResourceEntity.SetAssessmentTest(_assessmentTest)

        'Remove Custom Property Values
        RemoveCustomBankPropertyValues()

        If TestResourceEntity.RequiresMajorVersionIncrement() Then
            If Not IncrementVersion() Then
                Return False 'Cancel saving...
            End If
        End If

        Dim result As String = ResourceFactory.Instance.UpdateAssessmentTestResource(_testResourceEntity)

        If String.IsNullOrEmpty(result) Then
            ' refresh datasource so that dirty flags are removed
            For Each ctl As TestEditorContainerBase In _validationControls
                ctl.ResetDatasource()
            Next
            StatusTextLabel.Text = My.Resources.TestEditor_SaveTest_TestSavedStatusbarMessage
            resultValue = True
        Else
            ' an error has occurred while saving the test. Display this error on screen.
            MessageBox.Show(result, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            StatusTextLabel.Text = My.Resources.TestEditor_SaveTest_SaveFailedStatusbarMessage
            resultValue = False
        End If

        Return resultValue
    End Function

    Private Sub RemoveCustomBankPropertyValues()
        If ResourceCustomProperties1.RemovedEntities.Count > 0 Then
            For Each removedEntity As CustomBankPropertyValueEntity In ResourceCustomProperties1.RemovedEntities.OfType(Of CustomBankPropertyValueEntity)()
                _testResourceEntity.CustomBankPropertyValueCollection.Remove(removedEntity)
            Next

            BankFactory.Instance.DeleteCustomPropertyValues(ResourceCustomProperties1.RemovedEntities)
            ResourceCustomProperties1.RemovedEntities.Clear()
        End If
    End Sub

    Private Function IncrementVersion() As Boolean
        Return _windowfacade.OpenMajorVersionDialog(TestResourceEntity)
    End Function

    Private Sub SaveToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles SaveToolStripMenuItem.Click, SaveToolStripButton.Click
        PreSaveAndSaveAndPostSaveTest()
    End Sub

    Private Sub PropertyControl_CommandExecuteRequest(ByVal sender As Object, ByVal e As CommandExecuteRequestEventArgs) Handles TestPartControl.CommandExecuteRequest, TestSectionControl.CommandExecuteRequest, ItemReferenceControl.CommandExecuteRequest, TestPropertiesControl.CommandExecuteRequest
        Dim selectedTestComponent As AssessmentTestNode = HierarchyControl.SelectedComponent
        If selectedTestComponent IsNot Nothing Then
            HandleCommandExecuteRequestFromPropertyEditor(e.Command, selectedTestComponent)
        End If
    End Sub

    Private Sub SubControl_DataChanged(ByVal sender As Object, ByVal e As EventArgs) Handles TestPropertiesControl.DataChanged, TestPartControl.DataChanged, TestSectionControl.DataChanged, ItemReferenceControl.DataChanged
        HierarchyControl.RefreshDataSource()
    End Sub

    Private Sub SubControl_DependentResourceAdded(ByVal sender As Object, ByVal e As ResourceEventArgs) Handles TestSectionControl.DependentResourceAdded, TestPropertiesControl.DependentResourceAdded, ItemReferenceControl.DependentResourceAdded, TestPartControl.DependentResourceAdded
        DependencyManagement.AddDependentResourceToResource(_testResourceEntity, e.Resource.resourceId)
    End Sub

    Private Sub SubControl_DependentResourceRemoved(ByVal sender As Object, ByVal e As ResourceNameEventArgs) Handles TestSectionControl.DependentResourceRemoved, TestPropertiesControl.DependentResourceRemoved, ItemReferenceControl.DependentResourceRemoved, TestPartControl.DependentResourceRemoved
        'If a resource reference is removed by the TestSectionControl then the resource name is
        'added to the list of resources being dropped that will be processed prior to saving the test.
        If sender Is TestSectionControl Then
            If Not String.IsNullOrEmpty(e.ResourceName) Then
                If _resourceReferenceChanges.ContainsKey(e.ResourceName) Then
                    _resourceReferenceChanges.Item(e.ResourceName) = _resourceReferenceChanges.Item(e.ResourceName) - 1
                Else
                    _resourceReferenceChanges.Add(e.ResourceName, 0)
                End If
            End If
        Else
            DependencyManagement.RemoveDependentResourceFromResource(_testResourceEntity, e.ResourceName)
        End If
    End Sub

    Private Sub SubControl_ResourceNeeded(ByVal sender As Object, ByVal e As ResourceNeededEventArgs) Handles TestSectionControl.ResourceNeeded, TestPartControl.ResourceNeeded, TestPropertiesControl.ResourceNeeded, ItemReferenceControl.ResourceNeeded
        _resourceManager.HandleResourceNeeded(e, New ResourceRequestDTO())
    End Sub

    Private Sub TestEditor_FormClosed(ByVal sender As Object, ByVal e As FormClosedEventArgs) Handles MyBase.FormClosed
        ' release event handlers
        RemoveHandler Me.TestPropertiesControl.ResourceNeeded, AddressOf TestProperties_ResourceNeeded
        RemoveHandler TestSessionContext.ResourceNeeded, AddressOf TestProperties_ResourceNeeded

        ' clear resources
        ItemPreviewControl.StopPreview()
        TestBuilderAsyncProtocolContextManager.UnRegisterResourceManager(_resourceManager)
        TestSessionContext.CurrentItem = Nothing
        _assessmentTest = Nothing
        If _resourceManager IsNot Nothing Then
            _resourceManager.Dispose()
            _resourceManager = Nothing
        End If
    End Sub

    Private Sub TestEditor_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs) Handles MyBase.FormClosing
        If Not _viewSelectionDialogAtStartupCancelled Then
            ' ensures update if edit-control still has focus
            EnsuresFormUpdateAfterEditing()

            ' Close any windows (response or pop up) if open
            ItemPreviewControl.StopPreview()

            ' store the current size and windowstate
            TestBuilderClientSettings.TestEditorWindowState = CType(Me.WindowState, Integer)
            If Me.WindowState = FormWindowState.Normal Then
                TestBuilderClientSettings.TestEditorBounds = Me.Bounds
            End If

            If Not Me.SaveIfNecessary() AndAlso IsDirty Then e.Cancel = True Else e.Cancel = False
        End If
    End Sub

    Private Sub TestEditor_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load
        ' set to visible  = false, because we do not want the user to see all the rendering
        Me.Visible = False

        AddHandler Me.TestPropertiesControl.ResourceNeeded, AddressOf TestProperties_ResourceNeeded
        AddHandler TestSessionContext.ResourceNeeded, AddressOf TestProperties_ResourceNeeded

        _resourceReferenceChanges = New Dictionary(Of String, Integer)

        ' Register this form at the async protocol context manager and propagate the identifier to other
        ' controls
        _contextIdentifierForItemViewer = TestBuilderAsyncProtocolContextManager.RegisterNewResourceManager(_resourceManager)

        ' Get full entity from datasource
        If Not _testResourceEntity.IsNew Then
            _testResourceEntity = GetFullTestEntity(_testResourceEntity)
        End If
        If _testResourceEntity.IsNew AndAlso _testResourceEntity.IsTemplate Then
            _assessmentTest = New AssessmentTest2
        Else
            _assessmentTest = _testResourceEntity.GetAssessmentTest()
        End If

        Dim includedViewsInTest As List(Of String) = AssessmentTestv2Factory.GetIncludedViews(_assessmentTest)
        If includedViewsInTest.Count = 0 Then
            includedViewsInTest = AskSelectedViews()
        End If

        If Not includedViewsInTest.Any() Then
            ' cancel opening the form because no view is available in the test (user cancelled selection dialog)
            _viewSelectionDialogAtStartupCancelled = True
            Me.Close()
            Return
        End If

        ' control bindings
        BindControlsAtLoad(True)

        Me.DataBindings.Clear()
        '  set titlebar caption by adding binding for form.text
        Dim titleBarBinding As New Binding("text", _assessmentTest, "identifier")
        AddHandler titleBarBinding.Format, AddressOf TitleToFormTitleFormatter
        Me.DataBindings.Add(titleBarBinding)

        If Not _testResourceEntity.IsNew Then
            ShowWarningsIfCodeOrTitleIsDifferent()
        End If

        DisableToolstripWhenNoEditRights()
        UpdateStatusBar()



        BindCommands()

        ' set the previous sizing and windowstate
        Me.WindowState = CType(TestBuilderClientSettings.TestEditorWindowState, FormWindowState)
        If Me.WindowState = FormWindowState.Normal Then
            Me.Bounds = TestBuilderClientSettings.TestEditorBounds
        End If

        SetGenerateTestVariantsVisibility()

        Me.Visible = True

        TabControl2.SelectedTab = TabPageTestProperties
    End Sub


    ''' <summary>
    ''' '' Disable the Save toolstrip en menu button if the current user has no test edit rights.
    ''' </summary>
    Private Sub DisableToolstripWhenNoEditRights()

        If Not PermissionFactory.Instance.TryUserIsPermittedTo(TestBuilderPermissionAccess.Edit, TestBuilderPermissionTarget.TestEntity, _testResourceEntity.BankId) Then
            SaveToolStripMenuItem.Enabled = False
            SaveToolStripButton.Enabled = False
            SaveCloseToolStripMenuItem.Enabled = False
            SaveCloseToolStripButton.Enabled = False
            SaveAsToolStripMenuItem.Enabled = False
            SaveAsToolStripButton.Enabled = False
        End If

        'added so user cannot use save as.. if the test is new.
        If SaveAsToolStripButton.Enabled Then
            SaveAsToolStripButton.Enabled = Not TestResourceEntity.IsNew
            SaveAsToolStripMenuItem.Enabled = Not TestResourceEntity.IsNew
        End If
    End Sub

    Private Sub UpdateStatusBar()

        If _hasLoadadOldTestDefinitionModel Then
            StatusTextLabel.Text = My.Resources.TestEditorv2_OldModelOpenedStatusBarMessage
            ImportantMessageControl.Message = My.Resources.TestEditorv2_OldModelOpenedStatusBarMessage
        Else
            StatusTextLabel.Text = My.Resources.TestEditor_Load_TestDefinitionLoaded
            ImportantMessageControl.Visible = False
        End If
    End Sub

    Private Sub ShowWarningsIfCodeOrTitleIsDifferent()

        If Not _assessmentTest.Identifier.Equals(_testResourceEntity.Name) Then
            If MessageBox.Show(String.Format(My.Resources.AssessementTestCodeFieldDiffers, _testResourceEntity.Name, _assessmentTest.Identifier, Environment.NewLine), String.Empty, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = DialogResult.Yes Then
                _testResourceEntity.Name = _assessmentTest.Identifier
            Else
                _assessmentTest.Identifier = _testResourceEntity.Name
            End If
        End If

        If Not _assessmentTest.Title.Equals(_testResourceEntity.Title) Then
            If MessageBox.Show(String.Format(My.Resources.AssessementTestTitleFieldDiffers, _testResourceEntity.Title, _assessmentTest.Title, Environment.NewLine), String.Empty, MessageBoxButtons.YesNo, MessageBoxIcon.Information) = DialogResult.Yes Then
                _testResourceEntity.Title = _assessmentTest.Title
            Else
                _assessmentTest.Title = _testResourceEntity.Title
            End If
        End If
    End Sub

    Private Function AskSelectedViews() As List(Of String)
        ' this is a new test template. Let the user first select some views this test must support.
        Dim result As List(Of String) = New List(Of String)
        Dim viewSelectorDialog As New SelectSupportedViewsForAssessmentTestDialog(SelectSupportedViewsForAssessmentTestDialog.DialogDisplayMode.NewTestTemplate, True)
        If viewSelectorDialog.ShowDialog() = DialogResult.OK Then
            Dim selectedViews As List(Of String) = viewSelectorDialog.SelectedViewTypes

            ' create each selected view
            For Each viewToCreate In selectedViews
                AssessmentTestv2Factory.CreateView(_assessmentTest, viewToCreate)
            Next

            ' fetch included view again. This time the numbers of views should be higher then zero!
            result = AssessmentTestv2Factory.GetIncludedViews(_assessmentTest)
        End If
        Return result
    End Function

    Private Sub ChangeTestCodeDialog_ValidateNewCodeName(ByVal sender As Object, ByVal e As ValidateNewCodeNameEventArgs)
        e.Valid = Not ResourceFactory.Instance.ResourceExists(_testResourceEntity.BankId, e.NewCodeName, True)
        If Not e.Valid Then
            MessageBox.Show(My.Resources.TestEditor_TestCodeNameAlreadyExistsInBankHierarchy, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
        End If
    End Sub

    Private Sub TestProperties_ResourceNeeded(ByVal sender As Object, ByVal e As ResourceNeededEventArgs)
        _resourceManager.HandleResourceNeeded(e, New ResourceRequestDTO())
    End Sub

    Private Sub TestSectionPropertiesEditor_SectionLogicItemDataSourceChanged(ByVal sender As Object, ByVal e As SectionLogicSettingsDependencyChangedEventArgs) Handles TestSectionControl.SectionItemDatasourceDependentResourceChanged
        SetGenerateTestVariantsVisibility()
    End Sub

    ''' <summary>
    ''' Handles the SectionLogicResourceDialogRequest event of the TestSectionPropertiesEditor control. Show resource dialog for selecting resources.
    ''' </summary>
    Private Sub TestSectionPropertiesEditor_SectionLogicResourceDialogRequest(ByVal sender As Object, ByVal e As ResourceDialogRequestEventArgs) Handles TestSectionControl.ResourceDialogRequest
        Select Case e.ResourceType

            Case "Item"
                Dim dialog As New SelectItemResourceDialog(_testResourceEntity.BankId, _resourceManager, _contextIdentifierForItemViewer, _testResourceEntity, AddressOf ContainsItemSupportedViews)
                dialog.Multiselect = False
                Dim result As DialogResult = dialog.ShowDialog()

                If result = DialogResult.OK Then
                    If Not dialog.EntitiesProhibitedToSelect.Contains(dialog.SelectedEntities(0).resourceId) Then
                        e.ReturnedResourceName = dialog.SelectedEntities(0).name
                    Else
                        MessageBox.Show(My.Resources.SelectResourceDialog_CannotSelectBecauseOfStatus, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    End If
                End If

            Case "Generic"
                Using dialog As New SelectMediaResourceDialog(_testResourceEntity.BankId)
                    dialog.Filter = e.Filter
                    dialog.CanPickFiles = True

                    Dim result As DialogResult = dialog.ShowDialog()

                    If result = DialogResult.OK Then
                        If Not dialog.EntitiesProhibitedToSelect.Contains(dialog.SelectedEntity.resourceId) Then
                            e.ReturnedResourceName = dialog.SelectedEntity.name
                        Else
                            MessageBox.Show(My.Resources.SelectResourceDialog_CannotSelectBecauseOfStatus, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        End If
                    End If
                End Using

        End Select
    End Sub

    Private Sub TitleToFormTitleFormatter(ByVal sender As Object, ByVal e As ConvertEventArgs)
        Dim testResourceType As String
        If _testResourceEntity.IsTemplate Then
            testResourceType = My.Resources.TestTemplate
        Else
            testResourceType = My.Resources.Test
        End If

        e.Value = String.Format(My.Resources.EditorFor01, testResourceType, e.Value)
    End Sub

    ''' <summary>
    ''' Validates the whole assessment test. So it also validates data this is not on screen.
    ''' </summary>
    Private Function ValidateAssessmentTest() As Boolean
        Dim mergedValidationList As New ValidationValueCollection

        If _assessmentTest IsNot Nothing Then
            ' iterate each view and create an overall validation list.
            For Each validationViewType In _assessmentTest.IncludedViews
                Dim view As AssessmentTestViewBase = AssessmentTestv2Factory.CreateView(_assessmentTest, validationViewType)
                Dim validationEntityOfView As ValidatingEntityBase = DirectCast(view, ValidatingEntityBase)

                For Each validationEntry As ValidationValue In validationEntityOfView.GetValidationErrors(True)
                    If Not mergedValidationList.ContainsValidationValue(validationEntry.FieldName, validationEntry.ValidatingEntity) Then
                        mergedValidationList.Add(validationEntry)
                    End If
                Next
            Next
        End If

        If Not mergedValidationList.Any() Then
            Return True
        End If

        ' create message
        Dim errorMessageBuilder As New StringBuilder()
        errorMessageBuilder.AppendFormat(My.Resources.TestEditor_ValidateItem_ValidationErrors, Environment.NewLine)

        For Each validationEntry As ValidationValue In mergedValidationList
            If Not errorMessageBuilder.ToString.Contains(validationEntry.Message) Then
                errorMessageBuilder.AppendFormat(" - {0}. ({1}){2}", validationEntry.Message, validationEntry.FriendlyEntityName, Environment.NewLine)
            End If
        Next

        MessageBox.Show(errorMessageBuilder.ToString(), Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
        Return False
    End Function

    Private Sub HierarchyControl_ToggleLockedForEdit(ByVal sender As Object, ByVal e As TestHierarchyControl.ToggleLockedForEditEventArgs) Handles HierarchyControl.ToggleLockedForEdit
        LockTestComponentEditorForEdit(e.Locked)
    End Sub

    Private Sub LockedForEditToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles LockedForEditToolStripMenuItem.Click
        Dim lockedForEdit As Boolean = DirectCast(sender, ToolStripMenuItem).Checked
        HierarchyControl.LockTestComponentForEdit(lockedForEdit)
        LockTestComponentEditorForEdit(lockedForEdit)
    End Sub

    Private Sub LockTestComponentEditorForEdit(ByVal locked As Boolean)
        For Each testControl As TestEditorContainerBase In _validationControls
            If locked Then
                If TypeOf testControl Is ItemReferencePropertyEditorContainer AndAlso _testComponentBeingSelected Then
                    _itemPropertiesShouldBeShown = True
                End If
                testControl.Enabled = False
            Else
                testControl.Enabled = True
                testControl.HandleTestDesignPermissionChange(_userTestDesignPermission)
            End If
        Next

        SetTestComponentsButtonsEnableState(HierarchyControl.SelectedComponents.Count = 1)
    End Sub

    Private Function PreSaveAndSaveAndPostSaveTest() As Boolean
        Dim returnValue As Boolean = False

        ' ensures update if edit-control still has focus
        Me.EnsuresFormUpdateAfterEditing()

        ' Update the display values for the changed CustomBankProperties.
        For Each value In _testResourceEntity.CustomBankPropertyValueCollection.Where(Function(cbpv) cbpv.IsDirty)
            value.SetCustomPropertyDisplayValue()
        Next

        If SaveTest() Then
            ' get entity from database when entity was new. Database could add additional information to the entity while it was saved.
            _testResourceEntity = ResourceFactory.Instance.GetAssessmentTest(_testResourceEntity)
            _assessmentTest = _testResourceEntity.GetAssessmentTest()

            'check if the save as.. button can be enabled.
            If PermissionFactory.Instance.TryUserIsPermittedTo(TestBuilderPermissionAccess.Edit, TestBuilderPermissionTarget.ItemEntity, _testResourceEntity.BankId) Then
                Me.SaveAsToolStripButton.Enabled = True
            End If

            ' rebind (and reset hash)
            BindControlsAtLoad(True)

            returnValue = True
        End If

        Return returnValue
    End Function

    Private Sub ChangeViewTypesToolStripMenuItem_Click(ByVal sender As Object, ByVal e As EventArgs) Handles ChangeViewTypesToolStripMenuItem.Click
        ' open form to select view types
        Dim currentViews As New List(Of String)(_assessmentTest.IncludedViews)
        Using dialog As New SelectSupportedViewsForAssessmentTestDialog(SelectSupportedViewsForAssessmentTestDialog.DialogDisplayMode.AddOrDeleteViewTypesOnTest, currentViews, True)

            If dialog.ShowDialog(Me) <> DialogResult.OK Then
                Return
            End If

            Dim selectedViews As List(Of String) = dialog.SelectedViewTypes

            ' validate all items in the test whether they are compatible with the selected view types.
            Dim allItemsReferencesInTestCollection As ReadOnlyCollection(Of ItemReference2) = _assessmentTest.GetAllItemReferencesInTest()
            Dim allItemSourceNamesInTestCollection As New List(Of String)
            For Each itemRef As ItemReference2 In allItemsReferencesInTestCollection
                allItemSourceNamesInTestCollection.Add(itemRef.SourceName)
            Next

            Dim itemLayoutTemplateNames As New List(Of String)(ResourceFactory.Instance.GetItemLayoutTemplateSourceNamesForItemCodeList(_testResourceEntity.BankId, allItemSourceNamesInTestCollection))
            For Each itemLayoutTemplateName As String In itemLayoutTemplateNames
                If Not _itemSupportedViewsValidator.ContainsItemLayoutTemplateSupportedViews(itemLayoutTemplateName, selectedViews) Then
                    MessageBox.Show(My.Resources.TestEditor_ChangeViewTypes_InCompatibleItemsInTestMessage, My.Resources.TestEditor_ChangeViewTypes_InCompatibleItemsInTestTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Exit Sub
                End If
            Next

            ' loop though the current views. When the current view is not in the 'selected views' list, then the view must be deleted.
            For Each currentView In currentViews.Where(Function(v) v <> GenericTestModelPlugin.PLUGIN_NAME) 'generic view cannot be (de)selected in the dialog.
                If Not selectedViews.Contains(currentView) AndAlso MessageBox.Show(String.Format(My.Resources.TestEditor_RemoveViewTypeMessageBox, currentView.ToString()), My.Resources.TestEditor_RemoveViewTypeMessageBoxTitle, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then
                    ' delete the view
                    AssessmentTestv2Factory.DeleteViewFromModel(_assessmentTest, currentView)
                End If
            Next

            ' loop though each selected view. When the selected view is not in the 'current views' list, then the view must be added.
            selectedViews.Where(Function(v) Not currentViews.Contains(v)).ToList().ForEach(Sub(v)
                                                                                               Dim addedView As AssessmentTestViewBase = AssessmentTestv2Factory.CreateView(_assessmentTest, v)
                                                                                               SetDefaultViewSettingsInNewView(addedView)
                                                                                           End Sub)

            ' rebind, but not set a new hash because settings are not saved yet.
            HierarchyControl.RefetchDataSource(False)
            BindControlsAtLoad(False)

        End Using
    End Sub

    Private Function ContainsItemSupportedViews(ByVal itemLayoutTemplateName As String) As Boolean
        Return _itemSupportedViewsValidator.ContainsItemLayoutTemplateSupportedViews(itemLayoutTemplateName, GeneralHelper.GetViewsWithoutGeneral(_assessmentTest.IncludedViews))
    End Function


#Region " Set View Element Default Values "

    Private Sub SetDefaultViewSettingsInNewView(ByVal view As AssessmentTestViewBase)
        ' set default settings of assessment test root element
        For Each part As TestPartViewBase In view.TestParts

            ' iterate though test sections
            For Each section As TestSectionViewBase In part.Sections
                SetDefaultViewSettingsInNewView_IterateSections(section)
            Next
        Next
    End Sub

    Private Sub SetDefaultViewSettingsInNewView_IterateSections(ByVal testSectionView As TestSectionViewBase)
        For Each comp As TestComponentViewBase In testSectionView.Components
            If TypeOf comp Is TestSectionViewBase Then
                ' another section
                SetDefaultViewSettingsInNewView_IterateSections(DirectCast(comp, TestSectionViewBase))
            End If
        Next
    End Sub

#End Region

#End Region 'Private Methods

#Region "Public Methods"

    Public Sub DisableAllTestComponentButtons()
        AddItemToolStripButton.Enabled = False
        AddItemToolStripMenuItem.Enabled = False
        AddItemsFromCodeToolStripButton.Enabled = False
        AddItemsFromCodeToolStripMenuItem.Enabled = False
        AddSectionToolStripButton.Enabled = False
        AddSectionToolStripMenuItem.Enabled = False
        AddTestPartToolStripButton.Enabled = False
        AddTestpartToolStripMenuItem.Enabled = False
        DeleteTestComponentToolStripButton.Enabled = False
        DeleteTestComponentToolStripMenuItem.Enabled = False
        MoveItemDownInSectionToolStripMenuItem.Visible = False
        MoveItemDownToolStripButton.Visible = False
        MoveItemUpInSectionToolStripMenuItem.Visible = False
        MoveItemUpToolStripButton.Visible = False
        MoveSectionDownToolStripButton.Visible = False
        MoveSectionDownToolStripMenuItem.Visible = False
        MoveSectionUpToolStripButton.Visible = False
        MoveSectionUpToolStripMenuItem.Visible = False
        MoveTestPartDownToolStripButton.Visible = False
        MoveTestpartDownInTestToolStripMenuItem.Visible = False
        MoveTestpartUpInTestToolStripMenuItem.Visible = False
        MoveTestPartUpToolStripButton.Visible = False
        MoveButtonsMenuToolStripSeparator.Visible = False
        MoveButtonsToolStripSeparator.Visible = False
        CopyToolStripButton.Visible = False
        PasteToolStripButton.Visible = False

        ' do the same for the context menu inside the hierarchy control
        HierarchyControl.DisableAllTestComponentContextMenu()
    End Sub

#End Region 'Public Methods

#Region "Events"

    <Description("This event will be raised when the 'Preview' option in the menu is clicked"),
        Category("TestEditor events")>
    Public Event PreviewTest As EventHandler(Of EntityActionEventArgs)

#End Region 'Events


    Private Sub HierarchyControl_RefreshComponentsWithDataSource(ByVal sender As Object, ByVal e As TestHierarchyControl.RefreshComponentsWithDataSourceEventArgs) Handles HierarchyControl.RefreshComponentsWithDataSource
        Dim dataSourceSettingsList As New List(Of DataSourceSettings)
        Dim sectionLink As New Dictionary(Of AssessmentTestNode, DataSourceSettings)

        For Each node As AssessmentTestNode In e.ComponentsWithDataSources
            ' Only able to work with TestSections (only place with DataSource property) and where ItemDataSource is set
            If TypeOf node Is TestComponent2 AndAlso Not String.IsNullOrEmpty(DirectCast(node, TestSection2).ItemDataSource) AndAlso Not DirectCast(node, TestSection2).ItemDataSourceBehaviour = DataSourceBehaviourEnum.Seeding Then
                Dim resourceName As String = DirectCast(node, TestSection2).ItemDataSource
                Dim request = New ResourceRequestDTO With {.WithDependencies = True}
                Dim resource As BinaryResource = _resourceManager.GetTypedResource(resourceName, GetType(DataSourceSettings), request)
                If resource.ResourceObject IsNot Nothing AndAlso TypeOf resource.ResourceObject Is DataSourceSettings Then
                    Dim settings As DataSourceSettings
                    settings = CType(resource.ResourceObject, DataSourceSettings)
                    ' All datasources are in one list (even with multi-select)
                    dataSourceSettingsList.Add(settings)

                    ' We need to know which Datasource belongs to which section 
                    sectionLink.Add(node, settings)
                End If
            End If
        Next

        If Not dataSourceSettingsList.Any() Then
            Return
        End If

        ' refresh all selected sections with its datasource
        For Each node As AssessmentTestNode In sectionLink.Keys
            RefreshSectionDataSource(sectionLink, node)
        Next
    End Sub

    Private Sub RefreshSectionDataSource(sectionLink As Dictionary(Of AssessmentTestNode, DataSourceSettings), node As AssessmentTestNode)

        Dim settings As DataSourceSettings = sectionLink(node)
        If Not (TypeOf node Is TestSection2) Then
            Return
        End If

        Dim section As TestSection2 = DirectCast(node, TestSection2)

        ' Use factory method the create instance of Datasource
        Dim dataSource As ItemDataSource = TryCast(settings.CreateGetDataSource(), ItemDataSource)
        If dataSource Is Nothing Then
            Return
        End If

        Dim removalList As New List(Of String)
        Dim resultFromDataSource As IList(Of ResourceRef) = RefreshUsingDataSources.RefreshSectionWithDataSource(dataSource, _assessmentTest, _testResourceEntity, section, _resourceManager, _constructionFacade, removalList)
        If resultFromDataSource Is Nothing Then
            Return
        End If

        For Each depres As String In removalList
            If (_resourceReferenceChanges.ContainsKey(depres)) Then
                _resourceReferenceChanges.Item(depres) = _resourceReferenceChanges.Item(depres) - 1
            Else
                _resourceReferenceChanges.Add(depres, 0)
            End If
        Next
        Dim itemListWithoutAnchorItems As IList(Of String) = RefreshUsingDataSources.ReturnItemListAsStringWithoutAnchorItems(resultFromDataSource)

        ' get items from database and add to section
        Dim facadeToUse As TestConstructionFacade
        If dataSource.IsReturnSetValidated Then
            ' create facade where all validations are ignored
            facadeToUse = New TestConstructionFacade()
            AddHandler facadeToUse.ResolveValidationError, AddressOf FacadeIgnoreResolution_ResolveValidationError
        Else
            ' use default facade with user feedback validation
            facadeToUse = _constructionFacade
        End If

        If AddItemsToTest(itemListWithoutAnchorItems.ToList, section, section.Components.Count, -1, facadeToUse) Then
            ' show datasource report if available
            Dim dataSourceWithItems As New Dictionary(Of DataSourceSettings, IEnumerable(Of ResourceRef))
            dataSourceWithItems.Add(settings, resultFromDataSource)
        End If
    End Sub

    Private Sub SetGenerateTestVariantsVisibility()
        Me.GenerateVariantsTestToolStripMenuItem.Enabled = _assessmentTest.CanPropose(_resourceManager.BankId)
    End Sub

    Private Sub _constructionFacade_ResolveValidationError(ByVal sender As Object, ByVal e As TestConstructionValidationEventArgs) Handles _constructionFacade.ResolveValidationError
        Dim dialog As New ResolveValidationErrorDialog(e.UnderlyingException, e.ResolutionsAvailable)
        dialog.ShowDialog(Me)
        e.Resolution = dialog.Resolution
    End Sub

    Private Shared Sub FacadeIgnoreResolution_ResolveValidationError(ByVal sender As Object, ByVal e As TestConstructionValidationEventArgs)
        ' ignore everything
        If (e.ResolutionsAvailable And TestConstructionValidationEventArgs.ResolutionEnum.RetryFix) = TestConstructionValidationEventArgs.ResolutionEnum.RetryFix Then
            e.Resolution = TestConstructionValidationEventArgs.ResolutionEnum.RetryIgnore
        Else
            e.Resolution = TestConstructionValidationEventArgs.ResolutionEnum.Abort
        End If
    End Sub

    Private Sub ImportantMessageControl_Close(sender As Object, e As EventArgs) Handles ImportantMessageControl.Close
        ImportantMessageControl.Visible = False
    End Sub

    Private Sub GenerateVariantsTestToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles GenerateVariantsTestToolStripMenuItem.Click
        If Me.IsDirty Then
            MessageBox.Show(My.Resources.GenerateProposals_TestIsDirty, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return
        End If
        Dim proposalCreator As ICreateProposal = New ProposalCreator
        Dim sectionsWithItemDataSources As Dictionary(Of TestSection2, ItemDataSource) = RefreshUsingDataSources.GetItemDatasourceManyOutputForSectionsInTest(_assessmentTest, _resourceManager.BankId)
        If sectionsWithItemDataSources Is Nothing OrElse sectionsWithItemDataSources.Count = 0 Then
            Return
        End If

        Dim maxNrOfProposals As Integer = sectionsWithItemDataSources.Min(Function(ds) ds.Value.ItemCount)
        Dim dataSourceSettingsList As New List(Of DataSourceSettings)

        If Not proposalCreator.CanPerformProposalCreation(dataSourceSettingsList, _assessmentTest, _resourceManager) Then
            Dim errorMsg As String = DirectCast(proposalCreator, ProposalCreator).ErrorMessage
            If Not String.IsNullOrEmpty(errorMsg) Then MessageBox.Show(errorMsg)
            Return
        End If

        If Not dataSourceSettingsList.Any() Then
            Return
        End If

        Dim dialog As New RefreshDataSourcesDialog(dataSourceSettingsList, _resourceManager, True)
        dialog.SetMaxNrOfProposals(maxNrOfProposals)

        If dialog.ShowDialog(Me) <> DialogResult.OK Then
            Return
        End If

        Try
            ' set hourglass cursor
            Me.Cursor = Cursors.WaitCursor

            ' generate assessment tests
            Dim generatedTests As IEnumerable(Of Guid) = proposalCreator.CreateAndSaveProposalsFromDataSourceList(_testResourceEntity, dialog.NumberOfProposalsWanted, _resourceManager)
            If generatedTests IsNot Nothing Then
                If generatedTests.Count > 0 Then
                    MessageBox.Show(String.Format(My.Resources.GenerateProposals_NrOfGeneratedTests, generatedTests.Count))
                End If
            Else
                ' a datasource cancelled the operation. Do nothing.
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message, My.Resources.ErrorThrown, MessageBoxButtons.OK, MessageBoxIcon.Error)
        Finally
            Me.Cursor = Cursors.Default
        End Try
    End Sub
End Class
